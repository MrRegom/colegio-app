"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import environ
from django.contrib.messages import constants as messages

#FORCE_SCRIPT_NAME = '/proyectotic'

# Detección de PythonAnywhere
def is_pythonanywhere():
    """Detecta si el código está corriendo en PythonAnywhere"""
    return 'pythonanywhere.com' in os.environ.get('HTTP_HOST', '') or \
           os.environ.get('PYTHONANYWHERE_DOMAIN', '').endswith('pythonanywhere.com')


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env()
# Leer .env solo si existe (en PythonAnywhere las vars están en WSGI)
if Path(BASE_DIR / ".env").exists():
    environ.Env.read_env(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('DJANGO_SECRET_KEY', default='django-insecure-change-me-in-production-12345')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DJANGO_DEBUG', default=not is_pythonanywhere())

# En producción, cambia DEBUG a False y asegúrate de tener configurados tus ALLOWED_HOSTS
# DEBUG = False

# Permitir todos los hosts (útil para desarrollo, pero especificar hosts específicos en producción)
ALLOWED_HOSTS = env.list('DJANGO_ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    # Apps del proyecto
    'apps.accounts',  # Gestión de usuarios y permisos
    'apps.pages',    # Páginas del sistema

    # Apps de inventario
    'apps.bodega',    # Gestión de bodegas
    'apps.activos',   # Gestión de activos e inventario
    'apps.compras',   # Gestión de compras y proveedores
    'apps.solicitudes',  # Gestión de solicitudes de materiales
    'apps.reportes',  # Gestión de reportes
    'apps.notificaciones',  # Sistema de notificaciones
    'apps.bajas_inventario',  # Gestión de bajas de inventario
    'apps.inventario',  # Gestión completa de inventario (CRUD catálogos)
    
    # Crispy Forms
    "crispy_forms",
    "crispy_bootstrap5",
    
    # All Auth (restaurado)
    'allauth',
    'allauth.account',
    
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'apps.accounts.middleware.CurrentUserMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,"templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"


WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Configuración multi-base de datos
DATABASES = {
    # Base de datos principal del sistema (SQLite temporal)
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
    # Base de datos PostgreSQL con datos de funcionarios
    "postgres":{
        'ENGINE': env('POSTGRES_ENGINE'),
        'NAME': env('POSTGRES_NAME'),
        'USER': env('POSTGRES_USER'),
        'PASSWORD': env('POSTGRES_PASSWORD'),
        'HOST': env('POSTGRES_HOST'),
        'PORT': env('POSTGRES_PORT'),  
    },
}

# Router de base de datos para multi-DB
DATABASE_ROUTERS = ['core.db_router.DatabaseRouter']


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'es-cl'
TIME_ZONE = 'America/Santiago'
USE_I18N = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [BASE_DIR / 'static']

STATIC_ROOT = BASE_DIR / 'staticfiles'



# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Usando el modelo User estándar de Django con extensión en AuthUsuariosAcceso

ACCOUNT_FORMS = {
    "login": "apps.accounts.forms.UserLoginForm",
    "signup": "apps.accounts.forms.UserRegistrationForm",
    "change_password": "apps.accounts.forms.PasswordChangeForm",
    "set_password": "apps.accounts.forms.PasswordSetForm",
    "reset_password": "apps.accounts.forms.PasswordResetForm",
    "reset_password_from_key": "apps.accounts.forms.PasswordResetKeyForm",
}

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

#  Messages customize
MESSAGE_TAGS = {
    messages.DEBUG: "alert-info",
    messages.INFO: "alert-info",
    messages.SUCCESS: "alert-success",
    messages.WARNING: "alert-warning",
    messages.ERROR: "alert-danger",
}

#  All Auth Configurations
# Forzar redirecciones correctas bajo /informatica/
LOGIN_URL = "account_login"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/account/login/"
ACCOUNT_LOGOUT_REDIRECT_URL = "/account/login/"
ACCOUNT_LOGOUT_ON_GET = False
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True

SITE_ID = 1

#SESSION_COOKIE_PATH = '/proyectotic/'
#CSRF_COOKIE_PATH = '/proyectotic/'


# SMTP Configure
EMAIL_BACKEND = env('EMAIL_BACKEND')
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_USE_TLS = env('EMAIL_USE_TLS')
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')

# Media files (uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
